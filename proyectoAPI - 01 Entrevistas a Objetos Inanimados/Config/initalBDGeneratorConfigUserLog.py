import bcrypt
from oracleConfig import oracleConfig
from initalBDGeneratorConfigPrueba import initalBDGeneratorConfigPrueba
from datetime import datetime

class initalBDGeneratorConfigUserLog:
    lstUsuarios = [
        {   "rut": "10101010","nombre": "Clark","apellido": "Kent","estado": "1","password_hash": "","password_plain": "hash_superman123","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "20202020","nombre": "Bruce","apellido": "Wayne","estado": "1","password_hash": "","password_plain": "hash_batman456","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "30303030","nombre": "Diana","apellido": "Prince","estado": "1","password_hash": "","password_plain": "hash_wonderwoman789","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "40404040","nombre": "Barry","apellido": "Allen","estado": "1","password_hash": "","password_plain": "hash_flash123","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "50505050","nombre": "Hal","apellido": "Jordan","estado": "1","password_hash": "","password_plain": "hash_greenlantern456","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "60606060","nombre": "Arthur","apellido": "Curry","estado": "1","password_hash": "","password_plain": "hash_aquaman789","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "70707070","nombre": "Peter","apellido": "Parker","estado": "1","password_hash": "","password_plain": "hash_spiderman123","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "80808080","nombre": "Tony","apellido": "Stark","estado": "1","password_hash": "","password_plain": "hash_ironman456","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "90909090","nombre": "Steve","apellido": "Rogers","estado": "1","password_hash": "","password_plain": "hash_captainamerica789","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()},
        {   "rut": "10111213","nombre": "Natasha","apellido": "Romanoff","estado": "1","password_hash": "","password_plain": "hash_blackwidow123","usuario_creacion": "10101010","fecha_creacion": datetime.now(),"ip": "0.0.0.0","usuario_modificacion": "10101010","fecha_modificacion": datetime.now()}
    ]

    @staticmethod
    def iniciaDataBase():
        # Lista de usuarios
        connection = None
        try:
            connection = oracleConfig.connect()
            cursor = connection.cursor()

            try:
                sql_query = f"BEGIN EXECUTE IMMEDIATE 'DROP TABLE USUARIOS CASCADE CONSTRAINTS PURGE' ; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;"
                cursor.execute(sql_query)
                print(f"Borrado: Tabla USUARIOS")
            except Exception as e:
                print(f"Borrado: Error al borrar -> {e}")  

            try:
                sql_query = f"BEGIN EXECUTE IMMEDIATE 'DROP TABLE logData  CASCADE CONSTRAINTS PURGE' ; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;"
                cursor.execute(sql_query)
                print(f"Borrado: Tabla logData ")
            except Exception as e:
                print(f"Borrado: Error al borrar -> {e}")

            try:
                sql_query = f'drop procedure USUARIOS_PRC_SELECT_ROW_RUT'
                cursor.execute(sql_query)
                print(f"Borrado: PRC USUARIOS_PRC_SELECT_ROW_RUT")
            except Exception as e:
                print(f"Borrado: Error al borrar -> {e}") 

            try:
                sql_query = f'drop procedure USUARIOS_PRC_SELECT_ROW'
                cursor.execute(sql_query)
                print(f"Borrado: PRC USUARIOS_PRC_SELECT_ROW")
            except Exception as e:
                print(f"Borrado: Error al borrar -> {e}")

            try:
                sql_query = f'''
                    CREATE TABLE usuarios (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        rut NUMBER UNIQUE NOT NULL,
                        nombre VARCHAR2(100) NOT NULL,
                        apellido VARCHAR2(100) NOT NULL,
                        estado NUMBER(1) DEFAULT 1 NOT NULL,
                        password_hash VARCHAR2(255) NOT NULL,
                        password_plain VARCHAR2(100) NOT NULL,
                        usuario_creacion NUMBER NOT NULL,
                        fecha_creacion DATE NOT NULL,
                        ip VARCHAR2(45) NOT NULL,
                        usuario_modificacion NUMBER NOT NULL,
                        fecha_modificacion DATE NOT NULL
                    )
                '''
                cursor.execute(sql_query)
                print(f"Creación Tabla: Tabla usuarios")
            except Exception as e:
                print(f"Creación Tabla: Error al crear TABLE usuarios -> {e}") 

            try:
                sql_query = '''
                    CREATE TABLE logData (
                        ID_LOGDATA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        valor_anterior CLOB,
                        valor_nuevo CLOB,
                        fecha_cambio DATE
                    )
                '''
                cursor.execute(sql_query)
                print("Creación TABLA: Tabla logData")
            except Exception as e:
                print(f"Creación TABLA: Error al crear la tabla logData -> {e}")

            try:
                sql_query = f'''
                    CREATE OR REPLACE PROCEDURE insert_logData (
                        p_valor_anterior IN VARCHAR2,
                        p_valor_nuevo IN VARCHAR2,
                        p_fecha_cambio IN DATE DEFAULT SYSDATE,
                        v_salida OUT NUMBER
                    )
                    IS
                    BEGIN
                        INSERT INTO logData (valor_anterior, valor_nuevo, fecha_cambio)
                        VALUES (p_valor_anterior, p_valor_nuevo, p_fecha_cambio)
                        RETURNING ID_LOGDATA INTO v_salida;
                    END insert_logData;
                '''
                cursor.execute(sql_query)
                print(f"Creación PRC: Tabla insert_logData")
            except Exception as e:
                print(f"Creación PRC: Error al crear TABLE insert_logData -> {e}")

            try:
                sql_query = f"""
                    create or replace PROCEDURE USUARIOS_PRC_SELECT_ROW (
                        v_id IN NUMBER,
                        cursor_resultado OUT SYS_REFCURSOR
                    ) AS
                    BEGIN   
                        OPEN cursor_resultado FOR
                            SELECT id, rut, nombre, apellido, estado, password_hash, password_plain,
                                usuario_creacion, fecha_creacion, ip, usuario_modificacion, fecha_modificacion
                            FROM usuarios
                            WHERE id = v_id;
                    END;
                """
                cursor.execute(sql_query)
                print(f"Creación PRC: PRC USUARIOS_PRC_SELECT_ROW")
            except Exception as e:
                print(f"Creación PRC: Error al crear USUARIOS_PRC_SELECT_ROW -> {e}")


            try:
                sql_query = f"""
                    create or replace PROCEDURE USUARIOS_PRC_SELECT_ROW_RUT (
                        v_rut IN NUMBER,
                        cursor_resultado OUT SYS_REFCURSOR
                    ) AS
                    BEGIN   
                        OPEN cursor_resultado FOR
                            SELECT id, rut, nombre, apellido, estado, password_hash, password_plain,
                                usuario_creacion, fecha_creacion, ip, usuario_modificacion, fecha_modificacion
                            FROM usuarios
                            WHERE rut = v_rut;
                    END;
                """
                cursor.execute(sql_query)
                print(f"Creación PRC: PRC USUARIOS_PRC_SELECT_ROW_RUT")
            except Exception as e:
                print(f"Creación PRC: Error al Crear USUARIOS_PRC_SELECT_ROW_RUT -> {e}")

            try:
                sql_query = f"""
                    CREATE OR REPLACE PROCEDURE USUARIOS_PRC_INSERT(
                        p_rut               NUMBER,
                        p_nombre            VARCHAR2,
                        p_apellido          VARCHAR2,
                        p_estado            NUMBER DEFAULT 1,
                        p_password_hash     VARCHAR2,
                        p_password_plain    VARCHAR2,
                        p_usuario_creacion  NUMBER,
                        p_fecha_creacion    DATE,
                        p_ip                VARCHAR2,
                        p_usuario_modificacion NUMBER,
                        p_fecha_modificacion DATE,
                        v_salida            OUT NUMBER
                    ) IS
                    BEGIN
                        INSERT INTO usuarios (
                            rut, nombre, apellido, estado, password_hash, password_plain,
                            usuario_creacion, fecha_creacion, ip, usuario_modificacion, fecha_modificacion
                        ) VALUES (
                            p_rut, p_nombre, p_apellido, p_estado, p_password_hash, p_password_plain,
                            p_usuario_creacion, p_fecha_creacion, p_ip, p_usuario_modificacion, p_fecha_modificacion
                        )
                        RETURNING id INTO v_salida;
                    END;
                """
                cursor.execute(sql_query)
                print(f"Creación PRC: PRC USUARIOS_PRC_INSERT")
            except Exception as e:
                print(f"Creación PRC: Error al Crear USUARIOS_PRC_INSERT -> {e}")

            try:
                sql_query = f"""
                    CREATE OR REPLACE PROCEDURE USUARIOS_PRC_UPDATE(
                        p_id                    NUMBER,
                        p_rut                   NUMBER,
                        p_nombre                VARCHAR2,
                        p_apellido              VARCHAR2,
                        p_estado                NUMBER DEFAULT 1,
                        p_password_hash         VARCHAR2,
                        p_password_plain        VARCHAR2,
                        p_usuario_creacion      NUMBER,
                        p_fecha_creacion        DATE,
                        p_ip                    VARCHAR2,
                        p_usuario_modificacion  NUMBER,
                        p_fecha_modificacion    DATE,
                        v_salida                OUT NUMBER
                    ) IS
                    BEGIN
                        UPDATE usuarios
                        SET 
                            rut = p_rut,
                            nombre = p_nombre,
                            apellido = p_apellido,
                            estado = p_estado,
                            password_hash = p_password_hash,
                            password_plain = p_password_plain,
                            usuario_creacion = p_usuario_creacion,
                            fecha_creacion = p_fecha_creacion,
                            ip = p_ip,
                            usuario_modificacion = p_usuario_modificacion,
                            fecha_modificacion = p_fecha_modificacion
                        WHERE id = p_id
                        RETURNING id INTO v_salida;
                    END;
                """
                cursor.execute(sql_query)
                print(f"Creación PRC: PRC USUARIOS_PRC_UPDATE")
            except Exception as e:
                print(f"Creación PRC: Error al Crear USUARIOS_PRC_UPDATE -> {e}")

            try:
                for usuario in initalBDGeneratorConfigUserLog.lstUsuarios:         
                    cursor = connection.cursor()                  
                    password_hash = initalBDGeneratorConfigUserLog.hash_password(usuario["password_plain"])
                    v_salida = cursor.var(int)  # Variable de salida para el ID generado o actualizado
                    cursor.callproc(
                        "USUARIOS_PRC_INSERT",
                        [usuario["rut"],usuario["nombre"],usuario["apellido"],usuario["estado"],password_hash,usuario["password_plain"],usuario["usuario_creacion"],usuario["fecha_creacion"],usuario["ip"],usuario["usuario_modificacion"],usuario["fecha_modificacion"], v_salida]
                    )
                    usuario["id"] = v_salida.getvalue()
                    #print(f"Insert: Tabla USUARIOS: Nombre: {usuario["nombre"]} - Apellido: {usuario["apellido"]}.")                
            except Exception as e:
                print(f"Insert: Error Tabla USUARIOS -> {e}")
            
            connection.commit()
        except Exception as e:
            if connection:
                connection.rollback()
            raise Exception(f"iniciaDataBase: Error -> {e}")
        finally:
            if connection:
                cursor.close()
                connection.close()

    @staticmethod
    def hash_password(password: str) -> str:
        """
        Genera un hash seguro para la contraseña.
        :param password: La contraseña en texto plano.
        :return: La contraseña hasheada.
        """
        return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

if __name__ == "__main__":
    print(f"\033[92miniciaDataBase: Proceso INICIADO\033[0m")    
    initalBDGeneratorConfigUserLog.iniciaDataBase()
    print(f"\033[92miniciaDataBase: Proceso TERMINADO exitosamente\033[0m")
    initalBDGeneratorConfigPrueba.iniciaDataBase()
    